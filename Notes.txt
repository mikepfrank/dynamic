|==============================================================================
|						TOP OF FILE:	Notes.txt
|------------------------------------------------------------------------------
|
|	File name:	dynamic/Notes.txt					[text documentation file]
|
|	Purpose:
|
|		This file is for informal notes about the Dynamic software system.
|
|	Revision history:
|
|		v0.1 6/29/16 (MPF) - Initial version documenting the component/
|			module organization of the Dynamic system.
|
|------------------------------------------------------------------------------

	System:		(the overall software system)
	-------
	
		System name:			Dynamic 
	
	
	Applications:	(application programs within this system)
	-------------
			Modules:	(python modules implementing the given component)
			--------			
				Definitions:	(public classes & other top-level definitions provided by the module)
				------------
				
		* Dynamic.demo	Main demonstration application.
		
			* dynamic-demo.py		Top-level module of the demo application.
			
			* exampleNetworks.py	Example networks used in demo.
	
	
	Components:		(software components that, taken together, implement the 
	-----------		 system & its applications)
	
		* Dynamic.fixed	Fixed-point arithmetic component.  Although really, 
						this logically doesn't need to be considered part of 
						the Dynamic system; at the moment, it is implemented
						as an independent module.  (Except for using logmaster.)
			
			* fixed.py	Fixed-point arithmetic module.
			
					* fixed.Fixed(numbers.Rational):Class
						- Class for fixed-point numbers.
						
					* fixed.InitialValueError(Exception):Class
						- Superclass for errors in initial values.
						
					* fixed.NoInitialValueError(InitialValueError):Class
						- Initial value was not provided.

						
		* Dynamic.partialEval	Partially-evaluatable function component.
								This, too, is an independent component, aside
								from depending on the logmaster module.
								
			* partialEvalFunc.py
			
				* partialEvalFunc.PartiallyEvaluatableFunction:Class
				* partialEvalFunc.FunctionNotDefinedError(Exception):Class
				* partialEvalFunc.TooManyArgumentsError(Exception):Class
				* partialEvalFunc.UnknownArgumentsError(Exception):Class
			
			
		* Dynamic.functions		This component provided an abstraction for
								various classes of differentiable functions.
								(Note this is distinct from the DynamicFunction
								capability that is central to the simulator.)
								
			* differentiableFunction.py
			
			* unaryDifferentiableFunction.py
			
			* linearFunction.py
			
			* quadraticFunction.py
			
			
		* Dynamic.simulator		This component includes modules that are central
								to our core simulation capability.
								
			* simulationContext.py	- Global parameters/variables of simulation.
			
			* dynamicFunction.py 
				- Module for defining functions of discrete time that
					keep track of where they are in time currently.
					
			* dynamicVariable.py
				- Module for defining dynamical variables that keep
					track of their current value.
					
			* derivedDynamicFunction.py
				- For dynamical functions of dynamical variables.
				
			* differentiableDynamicFunction.py
				- For dynamical functions that can themselves be
					differentiated with respect to dynamical variables.
			
			* hamiltonianVariable.py
				- For position and momentum variables that dynamically
					depend on each other in a Hamiltonian sort of way.

			* dynamicCoordinate.py
				- For canonical dynamical coordinates that exist in a 
					position-momentum phase space.
		
		
		* Dynamic.network		This component allows us to define 
								networks of components and nodes that
								can be dynamically simulated.
			
			* dynamicNode.py		Network nodes with associated 
									dynamical coordinates.
			
			* linkport.py			Links between nodes and ports
									of components.
			
			* dynamicComponent.py	Components with ports and 
									interaction functions between them.
			
			* dynamicOneTerminalGate.py
				- A base class for dynamic components with exactly one port.
			
			* dynamicTwoTerminalGate.py
				- A base class for dynamic components with exactly two ports.
			
			* dynamicNetwork.py		Groups together a set of nodes,
									components, links, & a Hamiltonian.
									
			* dynamicMemCell.py		A simple read-only "memory cell."
			
			
		* Dynamic.boolean	This component defines Dynamic equivalents
							of various standard Boolean logic gates.
			
			* dynamicNOTGate.py		Dynamic version of a Boolean NOT gate.
			* dynamicANDGate.py		Dynamic version of a Boolean AND gate.
			* dynamicORGate.py		Dynamic version of a Boolean OR gate.
			* dynamicXORGate.py		Dynamic version of a Boolean XOR gate.
			
			
		* Dynamic.examples	Examples of higher-order logic functions 
							that can be composed out of Dynamic gates.
			
			* halfAdder.py			A binary half-adder (two 1-bit operands).
			* fullAdder.py			A binary full-adder (three 1-bit operands).
			
	
	Miscellaneous Modules:		(other system modules that are not yet 
	----------------------		 considered part of any formally-defined component)
	
		appdefs.py		Defines the name of the system and application.
		
		logmaster.py	Customized logger capability.  (Depends on appdefs.py.)



-------------------------------------------------------------------------------
Some concepts/classes: (OLD)

	* Network - An interlinked set of nodes and components.

	* Port - A named port of a component.
	
	* Node - Has one or more generalized coordinates, has links to ports of
		components.  Has an associated kinetic energy function.
	
	* Link - Idealized wire connecting a port of a component to a node.  Can 
		have an associated generalized coordinate representing a flow of
		something (e.g. charge) down that link, with an associated kinetic  
		energy function (e.g. corresponding to self-inductance).
	
	* BaseComponent - An icon, has associated ports, potential energy function.
		Can also have one or more internal node(s).  This is an abstract base
		class from which subclasses for specific types of components should be 
		derived.
		
	* SimpleNode - Has only one generalized coordinate, equipped with a basic
		quadratic kinetic energy function.
		
	* SimpleLink - Has no associated generalized coordinates representing 
		flows.  Implicitly, however, there can be a transfer of energy 
		down any link, due to the interaction potential energy associated
		with its connected component.
	
	* BaseKineticEnergyFunction - Abstract class for kinetic energy functions.
		Subclasses should know how to evaluate themselves and their partial
		derivatives.
	
	* QuadraticKineticEnergyFunction - A basic quadratic kinetic energy
		function.  Has an associated generalized mass parameter.  Knows
		its partial derivative.
		
	* DynamicNOTGate - A "NOT gate" or logical inverter component implemented 
		in the "dynamic" style; this works via a quadratic potential energy
		function operating on one less than the sum of input and output node 
		coordinates.
		
	* DynamicANDGate - An "AND gate" component implemented in the "dynamic"
		style; this works via a quadratic potential energy function operating
		on the difference between the output node coordinate and the product
		of input node coordinates.
		
	* DynamicORGate - An "OR gate" ...
	
	* DynamicXORGate - An "XOR gate" ...
	
	* BaseDifferentiableFunction
	
	* DynamicNOTFunction

	* PotentialEnergyTerm